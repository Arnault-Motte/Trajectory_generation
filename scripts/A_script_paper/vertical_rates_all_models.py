import sys  # noqa: I001
import os

from tqdm import tqdm

CURRENT_PATH = os.getcwd()
sys.path.append(os.path.abspath(CURRENT_PATH))
print("Current working directory:", CURRENT_PATH)
print(os.path.dirname(__file__))


import argparse

import torch

from data_orly.src.generation.data_process import (
    Data_cleaner,
    return_labels,
    compute_time_delta,
    compute_vertical_rate,
)
from data_orly.src.generation.generation import Generator, ONNX_Generator
from data_orly.src.generation.models.CVAE_TCN_VampPrior import CVAE_TCN_Vamp
from data_orly.src.generation.models.CVAE_ONNX import CVAE_ONNX
from data_orly.src.generation.models.VAE_ONNX import VAE_ONNX

from data_orly.src.generation.models.VAE_TCN_VampPrior import VAE_TCN_Vamp
from data_orly.src.generation.test_display import (
    plot_traffic,
    vertical_rate_profile_2,
)
from data_orly.src.generation.data_process import compute_vertical_rate
from data_orly.src.simulation import Simulator
from traffic.core import Traffic, Flight
from pitot import aero
import altair as alt
import pandas as pd
import numpy as np
from scipy.spatial.distance import pdist, squareform

import statistics


def create_dataset_vertical_rates(
    traffic: list[Traffic],
    type_traff: list[str] = ["Historical Data", "CVAE", "VAE"],
) -> pd.DataFrame:
    """
    Creates the dataframe used to create the vertical rate plots.
    Takes in entry traffics, representing the historical data, the data
    generated by the CVAE and the data generated by the VAEs
    """
    # traffics = {"Historical Data": t_og, "CVAE": t_cvae, "VAE": t_vae}
    traffics = {type_traff[i]: traffic[i] for i in range(len(traffic))}

    df = pd.DataFrame(columns=["Data_origin", "Typecode", "Vertical_Rate"])
    for label, t in traffics.items():
        # computing v rate and checking that we have the typecode
        t = compute_vertical_rate(t)
        if "typecode" not in t.data.columns:
            t = t.aircraft_data()

        # creating the dataframe
        df_temp = pd.DataFrame(
            columns=["Data_origin", "Typecode", "Vertical_Rate"]
        )
        df_temp["Vertical_Rate"] = [f.vertical_rate_mean for f in t]
        df_temp["Typecode"] = [f.typecode for f in t]
        df_temp["Data_origin"] = label
        df = pd.concat([df, df_temp], axis=0)
    return df


def plot_vertical_rate_df(df: pd.DataFrame, path: str) -> None:
    """
    Plots the vertical rates according to the dataframm in entry, created thanks to 'create_dataset_vertical_rates'
    """
    unique_typecodes = df["Typecode"].unique()
    for typecode in unique_typecodes:
        num_forgot_cvae = df[
            (df["Typecode"] == typecode)
            & (df["Data_origin"] == "CVAE")
            & ((df["Vertical_Rate"] <= 0) | (df["Vertical_Rate"] >= 4000))
        ]
        num_forgot_data = df[
            (df["Typecode"] == typecode)
            & (df["Data_origin"] == "Historical Data")
            & ((df["Vertical_Rate"] <= 0) | (df["Vertical_Rate"] >= 4000))
        ]
        num_forgot_vae = df[
            (df["Typecode"] == typecode)
            & (df["Data_origin"] == "VAE")
            & ((df["Vertical_Rate"] <= 0) | (df["Vertical_Rate"] >= 4000))
        ]
        print(typecode, "Vr rates out of range CVAE: ",len(num_forgot_cvae), "Vr rates out of range VAE:  ", len(num_forgot_vae), "Vr rates out of range data:  ", len(num_forgot_data))
        print("-----------------------------------------------------------------")

    chart = (
        alt.Chart(df)
        .transform_filter(
            (alt.datum.Vertical_Rate >= 0) & (alt.datum.Vertical_Rate <= 4000)
        )
        .transform_density(
            "Vertical_Rate",
            as_=["Vertical Rate (ft/min)", "Density"],
            groupby=["Data_origin", "Typecode"],
        )
        .mark_line()
        .encode(
            x="Vertical Rate (ft/min):Q",
            y="Density:Q",
            color=alt.Color("Data_origin:N"),
            row=alt.Row("Typecode:N", title=None),
            strokeDash=alt.condition(
                "datum.Data_origin == 'Historical Data'",
                alt.value([1, 0]),
                alt.value([4, 4]),
            ),
            opacity=alt.condition(
                "datum.Data_origin == 'Historical Data'",
                alt.value(1.0),
                alt.value(0.4),
            ),
        )
    )

    chart.save(path)
    return


def main() -> None:
    parser = argparse.ArgumentParser(description="My script with arguments")

    parser.add_argument(
        "--typecodes",
        nargs="+",
        type=str,
        default=[],
        help="typecodes for which to consider the altitude profiles",
    )
    parser.add_argument(
        "--data_og",
        type=str,
        default="",
        help="Path to the dataset to compute the vamp",
    )

    parser.add_argument(
        "--CVAE_ONNX",
        type=str,
        default="",
        help="Path to the ONNX CVAE",
    )
    parser.add_argument(
        "--VAEs_ONNX",
        nargs="+",
        type=str,
        default="",
        help="Paths to the ONNX VAEs",
    )

    parser.add_argument(
        "--plot_path",
        type=str,
        default="",
        help="Path to the plot",
    )

    parser.add_argument(
        "--n_f",
        type=int,
        default=2000,
        help="Number of flight to generate or sample per typecode",
    )

    parser.add_argument(
        "--vertical_rate_df",
        type=str,
        default="",
        help="If different than the empty string, will load the already created vertical rate dataframe instead of regenerating with the CVAE and the VAE",
    )

    parser.add_argument(
        "--cond_pseudo",
        type=int,
        default=0,
        help="equal to 1 if the CVAE as conditioned output",
    )


    args = parser.parse_args()

    print(args.typecodes)
    if args.vertical_rate_df =="":
        # data cleaner def
        data_cleaner = Data_cleaner(
            no_data=True
        )  # saves scalers, and scales and modifies data, allows to interpret the model outputs
        data_cleaner.load_scalers(args.CVAE_ONNX + "/scalers.pkl")

        # generating with CVAE
        cvae_onnx = CVAE_ONNX(args.CVAE_ONNX,condition_pseudo=args.cond_pseudo)  # the CVAE
        onnx_gen = ONNX_Generator(
            cvae_onnx, data_cleaner
        )  # used to gen from the CVAE

        n_f = args.n_f
        seq_len = 200
        generated = onnx_gen.generate_n_flight_per_labels(
            labels=args.typecodes, n_points=n_f, batch_size=500, lat_long=False
        )

        traff_CVAE = sum(generated)
        data = traff_CVAE.data
        data["typecode"] = [
            args.typecodes[i // (n_f * seq_len)]
            for i in range(n_f * len(args.typecodes) * seq_len)
        ]
        data["icao24"] = [
            i // seq_len for i in range(n_f * len(args.typecodes) * seq_len)
        ]
        data["callsign"] = data["icao24"]
        traff_CVAE = Traffic(data).assign_id().eval()
        print("CVAE: ", len(traff_CVAE))

        #gen VAEs--------------------------------------------------
        traffs = []
        for vae_dir in tqdm(args.VAEs_ONNX,desc='Generating with VAEs'):
            data_cleaner = Data_cleaner(no_data=True)
            data_cleaner.load_scalers(vae_dir+"/scalers.pkl")
            model = VAE_ONNX(vae_dir)
            gen = ONNX_Generator(model,data_cleaner)
            t = gen.generate_n_flight(n_f,500,lat_long=False)
            traffs.append(t)

        data_vae = sum(traffs).data

        data_vae["typecode"] = [
            args.typecodes[i // (n_f * seq_len)]
            for i in range(n_f * len(args.typecodes) * seq_len)
        ]
        data_vae["icao24"] = [
            i // seq_len for i in range(n_f * len(args.typecodes) * seq_len)
        ]
        data_vae["callsign"] = data_vae["icao24"]
        traff_VAE = Traffic(data_vae).assign_id().eval()

        ##data hist
        traff = Traffic.from_file(args.data_og)
        if "typecode" not in traff.data.columns:
            traff = traff.aircraft_data()

        traffs = []
        for typecode in tqdm(args.typecodes,desc="sampling historical data"):
            t = traff.query(f'typecode == "{typecode}"')
            t = t.sample(min(n_f, len(t)))
            traffs.append(t)

        traff_og = sum(traffs)

        df = create_dataset_vertical_rates([traff_og, traff_CVAE,traff_VAE])
        df.to_pickle(args.plot_path.split(".")[0] + ".pkl")
        df.to_csv(args.plot_path.split(".")[0] + ".csv")
    else:
        df = pd.read_csv(args.vertical_rate_df)


    plot_vertical_rate_df(df, path=args.plot_path)


if __name__ == "__main__":
    main()
